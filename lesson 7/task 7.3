# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, cell):
        self.cell = cell

    def __add__(self, other):
        return self.cell + other.cell

    def __sub__(self, other):
        if self.cell == other.cell:
            return 'У клеток равное количество ячеек, они самоуничтожаться.'
        elif self.cell > other.cell:
            return self.cell - other.cell
        else:
            return other.cell - self.cell

    def __mul__(self, other):
        return self.cell * other.cell

    def __truediv__(self, other):
        if self.cell == 0 or other.cell == 0:
            return 'Нельзя разделить клетку с 0 ячеек'
        else:
            return self.cell // other.cell

    def make_order(self, row):
        a = list('*' * self.cell)
        for i in range(row + 1):
            a.insert((row + 1) * i, '\n')
        a.pop(0)
        return ''.join(a)


cell_1 = Cell(11)
cell_2 = Cell(6)
print(f'Сложение клеток: {cell_1 + cell_2}')
print(f'Вычитание клеток: {cell_1 - cell_2}')
print(f'Умножение клеток: {cell_1 * cell_2}')
print(f'Деление клеток: {cell_1 / cell_2}')
print(f'Ячейки в клетке 1:\n{cell_1.make_order(3)}')
print(f'Ячейки в клетке 2:\n{cell_2.make_order(5)}')
